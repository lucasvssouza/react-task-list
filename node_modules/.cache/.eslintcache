[{"N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\index.js":"1","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\reportWebVitals.js":"2","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\App.js":"3","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\components\\AppContext\\AppProvider.js":"4","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\components\\AddTask\\AddTask.js":"5","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\components\\ListTask\\ListTask.js":"6","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\components\\AppContext\\AppContext.js":"7"},{"size":266,"mtime":1647372937634,"results":"8","hashOfConfig":"9"},{"size":364,"mtime":1647372941151,"results":"10","hashOfConfig":"9"},{"size":711,"mtime":1647391104974,"results":"11","hashOfConfig":"9"},{"size":812,"mtime":1647373133919,"results":"12","hashOfConfig":"9"},{"size":2747,"mtime":1647391127856,"results":"13","hashOfConfig":"9"},{"size":8453,"mtime":1647391119443,"results":"14","hashOfConfig":"9"},{"size":109,"mtime":1647370133490,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w1o584",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\index.js",[],[],"N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\reportWebVitals.js",[],[],"N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\App.js",["40"],[],"import { AddTask } from \"./components/AddTask/AddTask\";\nimport { ListTask } from \"./components/ListTask/ListTask\";\nimport AppProvider from \"./components/AppContext/AppProvider\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport appstyle from \"./app.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"backgroundApp\">\n        <div className=\"appContent\">\n          <AppProvider>\n            <h1 className=\"appTitle\">Lista de Tarefas</h1>\n            <AddTask></AddTask>\n            <ListTask></ListTask>\n            <ToastContainer />\n          </AppProvider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\components\\AppContext\\AppProvider.js",[],[],"N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\components\\AddTask\\AddTask.js",["41"],[],"import { useEffect, useRef } from \"react\";\r\nimport { useTaskList } from \"../AppContext/AppProvider\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport addstyle from \"./addstyle.css\";\r\n\r\nexport const AddTask = () => {\r\n  const { getTaskList, setTaskList } = useTaskList();\r\n  const target = useRef(\"\");\r\n\r\n  /// Função de envio de formulario\r\n  const createTask = (e) => {\r\n    e.preventDefault();\r\n    /// Remove os \"espaço\" iniciais do input\r\n    var name = target.current.value;\r\n    while (name.charAt(0) === \" \") {\r\n      name = name.substring(1);\r\n      console.log(name);\r\n    }\r\n    /// Remove os \"espaço\" iniciais do input\r\n    var checkText = name.toString().indexOf(\" \");\r\n    if (checkText !== 0 && name !== null && name !== \"\") {\r\n      /// Salva a nova tarefa em um array\r\n      let newtask = {\r\n        id: new Date().getTime().toString(),\r\n        name: name,\r\n        done: false,\r\n      };\r\n      /// Salva a nova tarefa em um array\r\n      /// Salva o objeto \"tarefa\" no array\r\n      setTaskList([...getTaskList, newtask]);\r\n      /// Salva  o objeto \"tarefa\" no array\r\n      /// Limpa o input\r\n      target.current.value = \"\";\r\n      /// Limpa o input\r\n      /// Exibe alerta de sucesso\r\n      toast.success(\"Tarefa criada com sucesso!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        theme: \"colored\",\r\n        progress: undefined,\r\n      });\r\n      /// Exibe alerta de sucesso\r\n    } else {\r\n      /// Exibe alerta de erro\r\n      toast.error(\"Não é possivel criar uma tarefa vazia!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        theme: \"colored\",\r\n        progress: undefined,\r\n      });\r\n      /// Exibe alerta de erro\r\n      /// Limpa o input\r\n      target.current.value = \"\";\r\n      /// Limpa o input\r\n    }\r\n  };\r\n  /// Função de envio de formulario\r\n\r\n  /// Salva a tarefa no localstorage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\r\n  }, [getTaskList]);\r\n  /// Salva a tarefa no localstorage\r\n\r\n  /// Formulario de cadastro\r\n  return (\r\n    <form autoComplete=\"off\" onSubmit={createTask} className=\"addtask\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Adicionar Tarefa\"\r\n        required\r\n        ref={target}\r\n        className=\"addtext\"\r\n        maxLength={45}\r\n      />\r\n      <button type=\"submit\" className=\"addbutton\" onClick={createTask}>\r\n        ➕\r\n      </button>\r\n    </form>\r\n  );\r\n  /// Formulario de cadastro\r\n};\r\n","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\components\\ListTask\\ListTask.js",["42"],[],"import { useTaskList } from \"../AppContext/AppProvider\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useState, useRef } from \"react\";\r\nimport liststyle from \"./liststyle.css\";\r\n\r\nexport const ListTask = () => {\r\n  const { getTaskList, setTaskList } = useTaskList();\r\n\r\n  /// Mapeia e renderiza a Lista de Tarefas\r\n  return (\r\n    <div>\r\n      {getTaskList.map((task) => {\r\n        /// Exclui a tarefa\r\n        function DelTask() {\r\n          const [modalDel, setModalDel] = useState(false);\r\n          const closeModalDel = () => setModalDel(false);\r\n          const openModalDel = () => setModalDel(true);\r\n\r\n          function checkDel() {\r\n            /// Filtra as tarefas que não possuem a ID de pesquisa\r\n            var id = task.id;\r\n            const fill = getTaskList.filter((task) => {\r\n              return task.id !== id;\r\n            });\r\n            setTaskList(fill);\r\n            /// Filtra as tarefas que não possuem a ID de pesquisa\r\n            /// Exibe alerta de sucesso\r\n            toast.success(\r\n              \"Tarefa '\" + task.name + \"' foi excluida com sucesso!\",\r\n              {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n              }\r\n            );\r\n            openModalDel(false);\r\n          }\r\n          /// Exibe alerta de sucesso\r\n\r\n          return (\r\n            /// Exibe o Modal de excluir tarefa\r\n            <div>\r\n              <button className=\"deletebutton\" onClick={openModalDel}>\r\n                ❌\r\n              </button>\r\n              <Modal show={modalDel} onHide={closeModalDel} contentClassName>\r\n                <div className=\"modalH2\">\r\n                  <h2>Excluir Tarefa</h2>\r\n                </div>\r\n                <hr style={{ marginTop: \"-10px\" }}></hr>\r\n                <div className=\"midDiv\">\r\n                  <label style={{ paddingLeft: \"10px\" }}>\r\n                    Deseja mesmo excluir a tarafa: '{task.name}' ?\r\n                  </label>\r\n                </div>\r\n                <hr></hr>\r\n                <div className=\"buttonsDiv\">\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"modalButtons\"\r\n                    onClick={closeModalDel}\r\n                  >\r\n                    Cancelar\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    className=\"modalButtons\"\r\n                    onClick={checkDel}\r\n                  >\r\n                    Excluir\r\n                  </Button>\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n            /// Exibe o Modal de excluir tarefa\r\n          );\r\n        }\r\n        /// Exclui a tarefa\r\n\r\n        /// Atualiza o \"status\" da tarefa\r\n        function checkBox() {\r\n          /// Define o \"status\" da tarefa para incompleto (false)\r\n          if (task.done) {\r\n            task.done = false;\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList;\r\n            });\r\n            setTaskList(boxUpdate);\r\n          }\r\n          /// Define o \"status\" da tarefa para incompleto (false)\r\n          /// Define o \"status\" da tarefa para completo (true)\r\n          else {\r\n            task.done = true;\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList;\r\n            });\r\n            setTaskList(boxUpdate);\r\n          }\r\n          /// Define o \"status\" da tarefa para completo (true)\r\n        }\r\n        /// Atualiza o \"status\" da tarefa\r\n\r\n        /// Atualiza o \"nome\" da tarefa\r\n        function UpdateTask() {\r\n          const [modalEdit, setmodalEdit] = useState(false);\r\n          const closeModalEdit = () => setmodalEdit(false);\r\n          const openModalEdit = () => setmodalEdit(true);\r\n          const updateText = useRef();\r\n\r\n          function checkUpdate(e) {\r\n            e.preventDefault();\r\n            /// Remove os \"espaço\" iniciais do input\r\n            var edittext = updateText.current.value;\r\n            while (edittext.charAt(0) === \" \") {\r\n              edittext = edittext.substring(1);\r\n              console.log(edittext);\r\n            }\r\n            /// Remove os \"espaço\" iniciais do input\r\n            var checkText = edittext.toString().indexOf(\" \");\r\n\r\n            if (checkText !== 0 && edittext !== \"\" && edittext !== null) {\r\n              task.name = edittext;\r\n              /// Atualiza o \"nome\" da tarefa e a atualiza o array\r\n              const boxUpdate = getTaskList.filter(() => {\r\n                return getTaskList;\r\n              });\r\n              /// Atualiza o \"nome\" da tarefa e a atualiza o array\r\n              /// Salva o novo \"nome da tarefa\"\r\n              setTaskList(boxUpdate);\r\n              /// Salva o novo \"nome da tarefa\"\r\n              openModalEdit(false);\r\n              /// Exibe alerta de sucesso\r\n              toast.success(\"Tarefa atualizada com sucesso!\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n              });\r\n              /// Exibe alerta de sucesso\r\n              /// Limpa o input\r\n              updateText.current.value = \"\";\r\n              /// Limpa o input\r\n            } else {\r\n              /// Exibe alerta de erro\r\n              toast.error(\"Não é possivel criar uma tarefa vazia!\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n              });\r\n              /// Exibe alerta de erro\r\n              /// Limpa o input\r\n              updateText.current.value = \"\";\r\n              /// Limpa o input\r\n            }\r\n          }\r\n          /// Exibe o Modal de atualizar tarefa\r\n          return (\r\n            <div>\r\n              <button className=\"editbutton\" onClick={openModalEdit}>\r\n                ✏️\r\n              </button>\r\n              <Modal show={modalEdit} onHide={closeModalEdit} contentClassName>\r\n                <div className=\"modalH2\">\r\n                  <h2>Editar Tarefa</h2>\r\n                </div>\r\n                <hr style={{ marginTop: \"-10px\" }}></hr>\r\n                <form onSubmit={checkUpdate} className=\"midDiv\">\r\n                  <input\r\n                    placeholder={task.name}\r\n                    ref={updateText}\r\n                    className=\"editInput\"\r\n                    maxLength={45}\r\n                  ></input>\r\n                </form>\r\n                <hr></hr>\r\n                <div className=\"buttonsDiv\">\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"modalButtons\"\r\n                    onClick={closeModalEdit}\r\n                  >\r\n                    Cancelar\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    className=\"modalButtons\"\r\n                    onClick={checkUpdate}\r\n                  >\r\n                    Salvar\r\n                  </Button>\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          );\r\n          /// Exibe o Modal de atualizar tarefa\r\n        }\r\n        /// Atualiza o \"nome\" da tarefa\r\n\r\n        /// Exibe a Lista de Tarefas\r\n        return (\r\n          <div className=\"tasklist\" key={task.id}>\r\n            <input\r\n              className=\"checkbox\"\r\n              type=\"checkbox\"\r\n              checked={task.done}\r\n              onChange={checkBox}\r\n            ></input>\r\n            <label className=\"tasktext\">{task.name}</label>\r\n            <UpdateTask></UpdateTask>\r\n            <DelTask></DelTask>\r\n          </div>\r\n        );\r\n        /// Exibe a Lista de Tarefas\r\n      })}\r\n    </div>\r\n  );\r\n  /// Mapeia e renderiza a Lista de Tarefas\r\n};\r\n","N:\\Lucas\\GitHub\\publico\\react-task-list\\src\\components\\AppContext\\AppContext.js",[],[],{"ruleId":"43","severity":1,"message":"44","line":6,"column":8,"nodeType":"45","messageId":"46","endLine":6,"endColumn":16},{"ruleId":"43","severity":1,"message":"47","line":5,"column":8,"nodeType":"45","messageId":"46","endLine":5,"endColumn":16},{"ruleId":"43","severity":1,"message":"48","line":7,"column":8,"nodeType":"45","messageId":"46","endLine":7,"endColumn":17},"no-unused-vars","'appstyle' is defined but never used.","Identifier","unusedVar","'addstyle' is defined but never used.","'liststyle' is defined but never used."]