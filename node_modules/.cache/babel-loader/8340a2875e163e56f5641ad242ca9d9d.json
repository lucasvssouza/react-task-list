{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\AddTask\\\\AddTask.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { useText, useTaskList } from \"../AppContext/AppProvider\";\nimport { Overlay, Tooltip, Alert } from \"react-bootstrap\";\nimport addstyle from \"./addstyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AddTask = () => {\n  _s();\n\n  const {\n    getText,\n    setText\n  } = useText();\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  const [show, setShow] = useState(false);\n  const target = useRef(\"\");\n  const displayTarget = useRef(null); /// Função de envio de formulario\n\n  function TaskAlert() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Overlay, {\n        target: displayTarget.current,\n        show: show,\n        placement: \"left\",\n        children: props => /*#__PURE__*/_jsxDEV(Tooltip, {\n          style: {\n            \"margin\": \"0px\",\n            \"padding\": \"0px\"\n          },\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Overlay, {\n        target: displayTarget.current,\n        show: show,\n        placement: \"right\",\n        children: _ref => {\n          let {\n            placement,\n            arrowProps,\n            show: _show,\n            popper,\n            ...props\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...props,\n            style: {\n              backgroundColor: 'rgba(255, 100, 100, 0.85)',\n              padding: '2px 10px',\n              color: 'white',\n              borderRadius: 3,\n              ...props.style\n            },\n            children: \"Simple tooltip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 11\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  const createTask = e => {\n    e.preventDefault();\n    var checkText = target.current.value.toString().indexOf(\" \");\n\n    if (checkText !== 0 && target.current.value !== \"\" && target.current.value !== null) {\n      /// Criar objeto \"tarefa\"\n      let newtask = {\n        id: new Date().getTime().toString(),\n        name: target.current.value,\n        done: false\n      }; /// Salvar objeto \"tarefa\" no array\n\n      setTaskList([...getTaskList, newtask]);\n      setText(\"\");\n      setShow(false);\n      target.current.value = \"\";\n    } else {\n      setShow(true);\n    }\n  }; /// Salvar no localstorage\n\n\n  useEffect(() => {\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\n  }, [getTaskList]);\n  return (\n    /*#__PURE__*/\n    /// Inicio do formulario\n    _jsxDEV(\"div\", {\n      ref: displayTarget,\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        autoComplete: \"off\",\n        onSubmit: createTask,\n        className: \"addtask\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Adicionar Tarefa\",\n          required: true,\n          ref: target,\n          className: \"addtext\",\n          maxLength: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"addbutton\",\n          onClick: createTask,\n          children: \"\\u2795\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TaskAlert, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this) /// Fim do formulario\n\n  );\n};\n\n_s(AddTask, \"0CPuBv9BOivVPPc45bXHV2To/bM=\", false, function () {\n  return [useText, useTaskList];\n});\n\n_c = AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/AddTask/AddTask.js"],"names":["useEffect","useState","useRef","useText","useTaskList","Overlay","Tooltip","Alert","addstyle","AddTask","getText","setText","getTaskList","setTaskList","show","setShow","target","displayTarget","TaskAlert","current","props","placement","arrowProps","_show","popper","backgroundColor","padding","color","borderRadius","style","createTask","e","preventDefault","checkText","value","toString","indexOf","newtask","id","Date","getTime","name","done","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { useText, useTaskList } from \"../AppContext/AppProvider\";\r\nimport { Overlay, Tooltip, Alert } from \"react-bootstrap\";\r\nimport addstyle from \"./addstyle.css\";\r\n\r\nexport const AddTask = () => {\r\n  const { getText, setText } = useText();\r\n  const { getTaskList, setTaskList } = useTaskList();\r\n  const [show, setShow] = useState(false);\r\n  const target = useRef(\"\");\r\n  const displayTarget = useRef(null)\r\n\r\n  /// Função de envio de formulario\r\n\r\n  function TaskAlert() {\r\n    return (\r\n      <>\r\n        <Overlay target={displayTarget.current} show={show} placement=\"left\">\r\n          {(props) => (\r\n            <Tooltip style={{\"margin\": \"0px\",\r\n            \"padding\": \"0px\"}} {...props}>\r\n\r\n            </Tooltip>\r\n          )}\r\n        </Overlay>\r\n\r\n        <Overlay target={displayTarget.current} show={show} placement=\"right\">\r\n        {({ placement, arrowProps, show: _show, popper, ...props }) => (\r\n          <div\r\n            {...props}\r\n            style={{\r\n              backgroundColor: 'rgba(255, 100, 100, 0.85)',\r\n              padding: '2px 10px',\r\n              color: 'white',\r\n              borderRadius: 3,\r\n              ...props.style,\r\n            }}\r\n          >\r\n            Simple tooltip\r\n          </div>\r\n        )}\r\n      </Overlay>\r\n        \r\n      </>\r\n    );\r\n\r\n  }\r\n\r\n  const createTask = (e) => {\r\n    e.preventDefault();\r\n\r\n    var checkText = target.current.value.toString().indexOf(\" \");\r\n\r\n    if (checkText !== 0 && target.current.value !== \"\" && target.current.value !== null) {\r\n      /// Criar objeto \"tarefa\"\r\n      let newtask = {\r\n        id: new Date().getTime().toString(),\r\n        name: target.current.value,\r\n        done: false,\r\n      };\r\n      /// Salvar objeto \"tarefa\" no array\r\n      setTaskList([...getTaskList, newtask]);\r\n      setText(\"\");\r\n      setShow(false)\r\n      target.current.value = \"\"\r\n    } else {\r\n      setShow(true)\r\n    }\r\n  };\r\n\r\n  /// Salvar no localstorage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\r\n  }, [getTaskList]);\r\n\r\n  return (\r\n    /// Inicio do formulario\r\n    <div ref={displayTarget}>\r\n      <form autoComplete=\"off\" onSubmit={createTask} className=\"addtask\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Adicionar Tarefa\"\r\n          required\r\n          ref={target}\r\n          className=\"addtext\"\r\n          maxLength={50}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"addbutton\"\r\n          onClick={createTask}\r\n        >\r\n          ➕\r\n        </button>\r\n      </form>\r\n      <TaskAlert></TaskAlert>\r\n    </div>\r\n    \r\n\r\n    /// Fim do formulario\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}