{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\ListTask\\\\ListTask.js\",\n    _s2 = $RefreshSig$();\n\nimport { useTaskList } from \"../AppContext/AppProvider\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useState, useRef } from \"react\";\nimport liststyle from \"./liststyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListTask = () => {\n  _s2();\n\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: getTaskList.map(task => {\n      var _s = $RefreshSig$();\n\n      function delTask() {\n        var id = task.id;\n        const fill = getTaskList.filter(task => {\n          return task.id !== id;\n        });\n        setTaskList(fill);\n      }\n\n      function checkBox() {\n        if (task.done) {\n          task.done = false;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        } else {\n          task.done = true;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        }\n      }\n\n      function Example() {\n        _s();\n\n        const [showModal, setShowModal] = useState(false);\n\n        const handleClose = () => setShowModal(false);\n\n        const handleShow = () => setShowModal(true);\n\n        const [show, setShow] = useState(false);\n        const updateText = useRef();\n\n        if (show) {\n          return /*#__PURE__*/_jsxDEV(Alert, {\n            show: show,\n            variant: \"danger\",\n            onClose: () => setShow(false),\n            dismissible: true,\n            children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n              children: \"Oh snap! You got an error!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Change this and that and try again. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras mattis consectetur purus sit amet fermentum.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 19\n          }, this);\n        }\n\n        function updateTask() {\n          if (updateText.current.value !== '' && updateText.current.value !== null) {\n            task.name = updateText.current.value;\n            const boxUpdate = getTaskList.filter(() => {\n              return getTaskList;\n            });\n            setTaskList(boxUpdate);\n            setShowModal(false);\n          } else {\n            setShow(true);\n          }\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"editbutton\",\n            onClick: handleShow,\n            children: \"\\u270F\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: handleClose,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              closeButton: true,\n              children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: \"Editar Tarefa\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: task.name,\n                ref: updateText,\n                className: \"taskedit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                onClick: handleClose,\n                children: \"Fechar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                onClick: updateTask,\n                children: \"Salvar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this);\n      }\n\n      _s(Example, \"B9wg064aWgYC1iQmqNJY17ljTXM=\");\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasklist\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"checkbox\",\n          type: \"checkbox\",\n          checked: task.done,\n          onChange: checkBox\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"tasktext\",\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deletebutton\",\n          onClick: delTask,\n          children: \"\\u274C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ListTask, \"sZF4+r8rE0bIOr2av7Pj6v5leOI=\", false, function () {\n  return [useTaskList];\n});\n\n_c = ListTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/ListTask/ListTask.js"],"names":["useTaskList","Modal","Button","Alert","useState","useRef","liststyle","ListTask","getTaskList","setTaskList","map","task","delTask","id","fill","filter","checkBox","done","boxUpdate","Example","showModal","setShowModal","handleClose","handleShow","show","setShow","updateText","updateTask","current","value","name"],"mappings":"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","sourcesContent":["import { useTaskList } from \"../AppContext/AppProvider\"\r\nimport { Modal, Button, Alert } from \"react-bootstrap\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport { useState, useRef } from \"react\"\r\nimport liststyle from \"./liststyle.css\"\r\n\r\nexport const ListTask = () => {\r\n  const { getTaskList, setTaskList } = useTaskList()\r\n\r\n  return (\r\n    <div>\r\n      {getTaskList.map((task) => {\r\n\r\n        function delTask() {\r\n          var id = task.id\r\n          const fill = getTaskList.filter((task) => {\r\n            return task.id !== id\r\n          })\r\n          setTaskList(fill)\r\n        }\r\n\r\n        function checkBox() {\r\n          if (task.done) {\r\n            task.done = false\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList\r\n            })\r\n            setTaskList(boxUpdate)\r\n          } else {\r\n            task.done = true\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList\r\n            })\r\n            setTaskList(boxUpdate)\r\n          }\r\n        }\r\n\r\n        \r\n          function Example() {\r\n            const [showModal, setShowModal] = useState(false);\r\n          \r\n            const handleClose = () => setShowModal(false);\r\n            const handleShow = () => setShowModal(true);\r\n            const [show, setShow] = useState(false);\r\n            const updateText = useRef();\r\n\r\n              if (show) {\r\n                return (\r\n                  <Alert show={show} variant=\"danger\" onClose={() => setShow(false)} dismissible>\r\n                    <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\r\n                    <p>\r\n                      Change this and that and try again. Duis mollis, est non commodo\r\n                      luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\r\n                      Cras mattis consectetur purus sit amet fermentum.\r\n                    </p>\r\n                  </Alert>\r\n                );\r\n              }          \r\n\r\n            function updateTask() {\r\n              \r\n              \r\n\r\n              if(updateText.current.value !== '' && updateText.current.value !== null)\r\n              {\r\n                  task.name = updateText.current.value\r\n                  const boxUpdate = getTaskList.filter(() => {\r\n                    return getTaskList\r\n                  })\r\n                  setTaskList(boxUpdate)\r\n                  setShowModal(false)\r\n              }else{\r\n                  setShow(true)\r\n              }\r\n            }  \r\n          \r\n            return (\r\n              <div>\r\n                <button className=\"editbutton\" onClick={handleShow}>\r\n                ✏️\r\n                </button>\r\n          \r\n                <Modal show={showModal} onHide={handleClose}>\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title>Editar Tarefa</Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                    <input placeholder={task.name} ref={updateText} className=\"taskedit\"></input>\r\n                  </Modal.Body>\r\n                  <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                      Fechar\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={updateTask}>\r\n                      Salvar\r\n                    </Button>\r\n                  </Modal.Footer>\r\n                </Modal>\r\n              </div>\r\n            )\r\n          }\r\n\r\n          return (\r\n            <div className=\"tasklist\" key={task.id}>\r\n              <input\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                checked={task.done}\r\n                onChange={checkBox}\r\n              ></input>\r\n              <label className=\"tasktext\">{task.name}</label>\r\n              <Example></Example>\r\n              <button className=\"deletebutton\" onClick={delTask}>\r\n                ❌\r\n              </button>\r\n            </div>\r\n          )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}