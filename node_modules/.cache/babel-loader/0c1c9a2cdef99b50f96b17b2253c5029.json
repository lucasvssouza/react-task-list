{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\tasklist2\\\\src\\\\components\\\\ListTask\\\\ListTask.js\",\n    _s = $RefreshSig$();\n\nimport { useTaskList } from '../AppContext/AppProvider';\nimport { useState, useRef } from 'react';\nimport liststyle from './liststyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListTask = () => {\n  _s();\n\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  const [getUpdate, setUpdate] = useState('');\n  const updatateText = useRef('a');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"taskList\",\n    children: getTaskList.map(task => {\n      /// Função de deletetar tarefa     \n      function delTask() {\n        var id = task.id;\n        const fill = getTaskList.filter(task => {\n          return task.id !== id;\n        });\n        setTaskList(fill);\n      } /// Função de atualizar o status da variavel \"done\" da tarefa\n\n\n      function checkBox() {\n        if (task.done) {\n          task.done = false;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        } else {\n          task.done = true;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        }\n      }\n\n      function updateTask() {\n        if (task.update) {\n          task.update = false;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        } else {\n          task.name = updatateText.current.value;\n          task.update = true;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        }\n      }\n\n      function TaskListRender() {\n        if (task.update) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tasklist\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"checkbox\",\n              type: \"checkbox\",\n              checked: task.done,\n              onChange: checkBox\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"tasktext\",\n              children: task.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"editbutton\",\n              onClick: updateTask,\n              children: \"\\u270F\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"deletebutton\",\n              onClick: delTask,\n              children: \"\\u274C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this)]\n          }, task.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"tasklist\",\n              onSubmit: updateTask,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: task.name,\n                va: true,\n                className: \"taskedit\",\n                ref: updatateText,\n                maxLength: 50,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"editbutton\",\n                type: \"submit\",\n                children: \"\\u270F\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"deletebutton\",\n                onClick: delTask,\n                children: \"\\u274C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(TaskListRender, {}, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ListTask, \"3e8e/tSgrqfGPohsXS6xdF9AnZ8=\", false, function () {\n  return [useTaskList];\n});\n\n_c = ListTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/tasklist2/src/components/ListTask/ListTask.js"],"names":["useTaskList","useState","useRef","liststyle","ListTask","getTaskList","setTaskList","getUpdate","setUpdate","updatateText","map","task","delTask","id","fill","filter","checkBox","done","boxUpdate","updateTask","update","name","current","value","TaskListRender"],"mappings":"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","sourcesContent":["import { useTaskList } from '../AppContext/AppProvider'\r\nimport { useState, useRef } from 'react'\r\nimport liststyle from './liststyle.css'\r\n\r\nexport const ListTask = () =>{\r\n    \r\n    const { getTaskList, setTaskList} = useTaskList()\r\n    const [ getUpdate, setUpdate ] = useState('')\r\n    const updatateText = useRef('a')\r\n\r\n    return(\r\n        <div className=\"taskList\">\r\n            \r\n            {/* Renderizar a lista de tarefas */}\r\n            {getTaskList.map((task) => {\r\n\r\n            /// Função de deletetar tarefa     \r\n            function delTask(){\r\n                var id = task.id\r\n                const fill = getTaskList.filter((task) =>{\r\n                    return task.id !== id\r\n                })\r\n                setTaskList(fill)\r\n            }\r\n\r\n            /// Função de atualizar o status da variavel \"done\" da tarefa\r\n            function checkBox(){\r\n                if(task.done){\r\n                    task.done = false\r\n                    const boxUpdate = getTaskList.filter(() =>{\r\n                        return getTaskList\r\n                    })\r\n                    setTaskList(boxUpdate)\r\n                } else{\r\n                    task.done = true\r\n                    const boxUpdate = getTaskList.filter(() =>{\r\n                        return getTaskList\r\n                    })\r\n                    setTaskList(boxUpdate)\r\n                }\r\n            }\r\n\r\n            function updateTask(){\r\n                \r\n                if(task.update){\r\n                    task.update = false\r\n                    const boxUpdate = getTaskList.filter(() =>{\r\n                        return getTaskList\r\n                    })\r\n                    setTaskList(boxUpdate)\r\n                }else{\r\n                    task.name = updatateText.current.value\r\n                    task.update = true\r\n                    const boxUpdate = getTaskList.filter(() =>{\r\n                        return getTaskList\r\n                    })\r\n                    setTaskList(boxUpdate)\r\n                }\r\n            }\r\n                  \r\n                function TaskListRender() {\r\n                    if (task.update){\r\n                        return(\r\n                            <div className='tasklist' key={task.id}>  \r\n                                <input \r\n                                    className='checkbox'\r\n                                    type=\"checkbox\"\r\n                                    checked={task.done}\r\n                                    onChange={checkBox}>\r\n                                </input>\r\n                                <label className='tasktext'>{task.name}</label>\r\n                                <button className='editbutton' onClick={updateTask}>✏️</button>\r\n                                <button className='deletebutton' onClick={delTask}>❌</button>  \r\n                            </div>\r\n                        )\r\n                    }else{\r\n                        return (\r\n                            <div key={task.id}>\r\n                                <form className='tasklist' onSubmit={updateTask}>\r\n                                    <input type='text' placeholder={task.name} va className='taskedit' ref={updatateText} maxLength={50} required />\r\n                                    <button className='editbutton' type='submit'>✏️</button>\r\n                                    <button className='deletebutton' onClick={delTask}>❌</button>  \r\n                                </form>\r\n                            </div>\r\n                        )\r\n                    }\r\n                }\r\n\r\n            return (       \r\n                        <TaskListRender key={task.id} />\r\n                    )})}\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}