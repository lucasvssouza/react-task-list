{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\ListTask\\\\ListTask.js\",\n    _s2 = $RefreshSig$();\n\nimport { useTaskList } from \"../AppContext/AppProvider\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useState, useRef } from \"react\";\nimport liststyle from \"./liststyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListTask = () => {\n  _s2();\n\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: getTaskList.map(task => {\n      var _s = $RefreshSig$();\n\n      function delTask() {\n        var id = task.id;\n        const fill = getTaskList.filter(task => {\n          return task.id !== id;\n        });\n        setTaskList(fill);\n        console.log(\"A tarefa '\" + task.name + \"' foi excluida\");\n      }\n\n      function checkBox() {\n        if (task.done) {\n          task.done = false;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n          console.log(\"O status da tarefa foi atulizado para 'Em andamento'\");\n        } else {\n          task.done = true;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n          console.log(\"O status da tarefa foi atulizado para 'Completo'\");\n        }\n      }\n\n      function UpdateTask() {\n        _s();\n\n        const [showModal, setShowModal] = useState(false);\n\n        const handleClose = () => setShowModal(false);\n\n        const handleShow = () => setShowModal(true);\n\n        const [show, setShow] = useState(false);\n        const updateText = useRef();\n\n        function checkUpdate(e) {\n          var checkText = updateText.current.value.toString().indexOf(\" \");\n\n          if (updateText.current.value !== \"\" && checkText !== 0 && updateText.current.value !== null) {\n            e.preventDefault();\n            task.name = updateText.current.value;\n            const boxUpdate = getTaskList.filter(() => {\n              return getTaskList;\n            });\n            setTaskList(boxUpdate);\n            setShowModal(false);\n            console.log(\"Tarefa atualizada para: \" + task.name);\n          } else {\n            e.preventDefault();\n            setShow(true);\n            console.log(\"Erro ao atualizar a tarefa!\");\n          }\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"editbutton\",\n            onClick: handleShow,\n            children: \"\\u270F\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: handleClose,\n            contentClassName: true,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"editH1\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Editar Tarefa\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n              style: {\n                \"margin-top\": \"-10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: checkUpdate,\n              className: \"inputDiv\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: task.name,\n                ref: updateText,\n                className: \"editInput\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"buttonsDiv\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                className: \"editButtons\",\n                onClick: handleClose,\n                children: \"Fechar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                className: \"editButtons\",\n                onClick: checkUpdate,\n                children: \"Salvar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Alert, {\n              show: show,\n              variant: \"danger\",\n              onClose: () => setShow(false),\n              dismissible: true,\n              children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n                children: \"Erro ao atualizar a tarefa!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"A tarefa n\\xE3o pode estar vazia ou come\\xE7ar com um espa\\xE7o\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this);\n      }\n\n      _s(UpdateTask, \"B9wg064aWgYC1iQmqNJY17ljTXM=\");\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasklist\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"checkbox\",\n          type: \"checkbox\",\n          checked: task.done,\n          onChange: checkBox\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"tasktext\",\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(UpdateTask, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deletebutton\",\n          onClick: delTask,\n          children: \"\\u274C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ListTask, \"sZF4+r8rE0bIOr2av7Pj6v5leOI=\", false, function () {\n  return [useTaskList];\n});\n\n_c = ListTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/ListTask/ListTask.js"],"names":["useTaskList","Modal","Button","Alert","useState","useRef","liststyle","ListTask","getTaskList","setTaskList","map","task","delTask","id","fill","filter","console","log","name","checkBox","done","boxUpdate","UpdateTask","showModal","setShowModal","handleClose","handleShow","show","setShow","updateText","checkUpdate","e","checkText","current","value","toString","indexOf","preventDefault"],"mappings":"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","sourcesContent":["import { useTaskList } from \"../AppContext/AppProvider\"\r\nimport { Modal, Button, Alert } from \"react-bootstrap\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport { useState, useRef } from \"react\"\r\nimport liststyle from \"./liststyle.css\"\r\n\r\nexport const ListTask = () => {\r\n  const { getTaskList, setTaskList } = useTaskList()\r\n\r\n  return (\r\n    <div>\r\n      {getTaskList.map((task) => {\r\n        function delTask() {\r\n          var id = task.id\r\n          const fill = getTaskList.filter((task) => {\r\n            return task.id !== id\r\n          })\r\n          setTaskList(fill)\r\n          console.log(\"A tarefa '\" + task.name + \"' foi excluida\")\r\n        }\r\n\r\n        function checkBox() {\r\n          if (task.done) {\r\n            task.done = false\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList\r\n            })\r\n            setTaskList(boxUpdate)\r\n            console.log(\"O status da tarefa foi atulizado para 'Em andamento'\")\r\n          } else {\r\n            task.done = true\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList\r\n            })\r\n            setTaskList(boxUpdate)\r\n            console.log(\"O status da tarefa foi atulizado para 'Completo'\")\r\n          }\r\n        }\r\n\r\n        function UpdateTask() {\r\n          const [showModal, setShowModal] = useState(false)\r\n          const handleClose = () => setShowModal(false)\r\n          const handleShow = () => setShowModal(true)\r\n          const [show, setShow] = useState(false)\r\n          const updateText = useRef()\r\n\r\n          function checkUpdate(e) {\r\n            var checkText = updateText.current.value.toString().indexOf(\" \")\r\n\r\n            if (\r\n              updateText.current.value !== \"\" &&\r\n              checkText !== 0 &&\r\n              updateText.current.value !== null\r\n            ) {\r\n              e.preventDefault()\r\n              task.name = updateText.current.value\r\n              const boxUpdate = getTaskList.filter(() => {\r\n                return getTaskList\r\n              })\r\n              setTaskList(boxUpdate)\r\n              setShowModal(false)\r\n              console.log(\"Tarefa atualizada para: \" + task.name)\r\n            } else {\r\n              e.preventDefault()\r\n              setShow(true)\r\n              console.log(\"Erro ao atualizar a tarefa!\")\r\n            }\r\n          }\r\n\r\n          return (\r\n            <div>\r\n              <button className=\"editbutton\" onClick={handleShow}>\r\n                ✏️\r\n              </button>\r\n\r\n              <Modal show={showModal} onHide={handleClose} contentClassName>\r\n                <div className=\"editH1\">\r\n                  <h1>Editar Tarefa</h1>\r\n                  \r\n                </div>\r\n\r\n                <hr style={{\"margin-top\": \"-10px\"}}></hr>\r\n                <form onSubmit={checkUpdate} className=\"inputDiv\">\r\n                    <input\r\n                      placeholder={task.name}\r\n                      ref={updateText}\r\n                      className=\"editInput\"\r\n                    ></input>\r\n                  </form>\r\n                  <hr></hr>\r\n\r\n                <div className=\"buttonsDiv\">\r\n                \r\n                  <Button variant=\"secondary\"className=\"editButtons\" onClick={handleClose}>\r\n                    Fechar\r\n                  </Button>\r\n                  <Button variant=\"primary\" className=\"editButtons\" onClick={checkUpdate}>\r\n                    Salvar\r\n                  </Button>\r\n                </div>\r\n                <Alert\r\n                  show={show}\r\n                  variant=\"danger\"\r\n                  onClose={() => setShow(false)}\r\n                  dismissible\r\n                >\r\n                <Alert.Heading>Erro ao atualizar a tarefa!</Alert.Heading>\r\n                  <p>A tarefa não pode estar vazia ou começar com um espaço</p>\r\n                </Alert>\r\n              </Modal>\r\n            </div>\r\n          )\r\n        }\r\n\r\n        return (\r\n          <div className=\"tasklist\" key={task.id}>\r\n            <input\r\n              className=\"checkbox\"\r\n              type=\"checkbox\"\r\n              checked={task.done}\r\n              onChange={checkBox}\r\n            ></input>\r\n            <label className=\"tasktext\">{task.name}</label>\r\n            <UpdateTask></UpdateTask>\r\n            <button className=\"deletebutton\" onClick={delTask}>\r\n              ❌\r\n            </button>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}