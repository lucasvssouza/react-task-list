{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\AddTask\\\\AddTask.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { useText, useTaskList } from \"../AppContext/AppProvider\";\nimport { Overlay, Tooltip, Alert } from \"react-bootstrap\";\nimport addstyle from \"./addstyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AddTask = () => {\n  _s();\n\n  const {\n    getText,\n    setText\n  } = useText();\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  const [show, setShow] = useState(false);\n  const target = useRef(null); /// Função de envio de formulario\n\n  function Example() {\n    setTimeout(function () {\n      //Start the timer\n      setShow(false); //After 1 second, set render to true\n    }.bind(this), 5000);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Overlay, {\n        target: target.current,\n        show: show,\n        placement: \"left\",\n        children: props => /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: \"overlay-example\",\n          ...props,\n          children: /*#__PURE__*/_jsxDEV(Alert.Heading, {\n            children: \"Erro ao atualizar a tarefa!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  const createTask = e => {\n    e.preventDefault();\n    var checkText = getText.toString().indexOf(\" \");\n\n    if (checkText !== 0 && getText !== \"\" && getText !== null) {\n      /// Criar objeto \"tarefa\"\n      let newtask = {\n        id: new Date().getTime().toString(),\n        name: getText,\n        done: false\n      }; /// Salvar objeto \"tarefa\" no array\n\n      setTaskList([...getTaskList, newtask]);\n      setText(\"\");\n    } else {\n      setShow(true);\n    }\n  }; /// Salvar no localstorage\n\n\n  useEffect(() => {\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\n  }, [getTaskList]);\n  return (\n    /*#__PURE__*/\n    /// Inicio do formulario\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        autoComplete: \"off\",\n        onSubmit: createTask,\n        className: \"addtask\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Adicionar Tarefa\",\n          required: true,\n          onChange: e => setText(e.target.value),\n          value: getText,\n          ref: target,\n          className: \"addtext\",\n          maxLength: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"addbutton\",\n          onClick: createTask,\n          children: \"\\u2795\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this) /// Fim do formulario\n\n  );\n};\n\n_s(AddTask, \"GeuxroWt6mbqnp+LXMe01fkclGk=\", false, function () {\n  return [useText, useTaskList];\n});\n\n_c = AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/AddTask/AddTask.js"],"names":["useEffect","useState","useRef","useText","useTaskList","Overlay","Tooltip","Alert","addstyle","AddTask","getText","setText","getTaskList","setTaskList","show","setShow","target","Example","setTimeout","bind","current","props","createTask","e","preventDefault","checkText","toString","indexOf","newtask","id","Date","getTime","name","done","localStorage","setItem","JSON","stringify","value"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { useText, useTaskList } from \"../AppContext/AppProvider\";\r\nimport { Overlay, Tooltip, Alert } from \"react-bootstrap\";\r\nimport addstyle from \"./addstyle.css\";\r\n\r\nexport const AddTask = () => {\r\n  const { getText, setText } = useText();\r\n  const { getTaskList, setTaskList } = useTaskList();\r\n  const [show, setShow] = useState(false);\r\n  const target = useRef(null);\r\n\r\n  /// Função de envio de formulario\r\n\r\n  function Example() {\r\n\r\n    setTimeout(function() { //Start the timer\r\n        setShow(false) //After 1 second, set render to true\r\n    }.bind(this), 5000)\r\n     \r\n    return (\r\n      <>\r\n        <Overlay target={target.current} show={show} placement=\"left\">\r\n          {(props) => (\r\n            <Tooltip id=\"overlay-example\" {...props}>\r\n              <Alert.Heading>Erro ao atualizar a tarefa!</Alert.Heading>\r\n            </Tooltip>\r\n          )}\r\n        </Overlay>\r\n        \r\n      </>\r\n    );\r\n\r\n  }\r\n\r\n  const createTask = (e) => {\r\n    e.preventDefault();\r\n\r\n    var checkText = getText.toString().indexOf(\" \");\r\n\r\n    if (checkText !== 0 && getText !== \"\" && getText !== null) {\r\n      /// Criar objeto \"tarefa\"\r\n      let newtask = {\r\n        id: new Date().getTime().toString(),\r\n        name: getText,\r\n        done: false,\r\n      };\r\n      /// Salvar objeto \"tarefa\" no array\r\n      setTaskList([...getTaskList, newtask]);\r\n      setText(\"\");\r\n    } else {\r\n      setShow(true)\r\n    }\r\n  };\r\n\r\n  /// Salvar no localstorage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\r\n  }, [getTaskList]);\r\n\r\n  return (\r\n    /// Inicio do formulario\r\n    <div>\r\n      <form autoComplete=\"off\" onSubmit={createTask} className=\"addtask\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Adicionar Tarefa\"\r\n          required\r\n          onChange={(e) => setText(e.target.value)}\r\n          value={getText}\r\n          ref={target}\r\n          className=\"addtext\"\r\n          maxLength={50}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"addbutton\"\r\n          onClick={createTask}\r\n        >\r\n          ➕\r\n        </button>\r\n        <Example></Example>\r\n      </form>\r\n      \r\n    </div>\r\n\r\n    /// Fim do formulario\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}