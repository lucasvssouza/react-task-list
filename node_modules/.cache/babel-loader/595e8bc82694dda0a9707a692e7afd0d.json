{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\tasklist2\\\\src\\\\components\\\\ListTask\\\\ListTask.js\",\n    _s2 = $RefreshSig$();\n\nimport { useTaskList } from \"../AppContext/AppProvider\";\nimport { useRef, useMemo, useCallback, useState } from \"react\";\nimport liststyle from \"./liststyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListTask = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  const updatateText = useRef(\"a\");\n  const [getUpdate, setUpdate] = useState(true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: _s(getTaskList.map(_s(task => {\n      _s();\n\n      const updateValue = useMemo(() => {\n        task.update = false;\n      }, []);\n\n      function delTask() {\n        var id = task.id;\n        const fill = getTaskList.filter(task => {\n          return task.id !== id;\n        });\n        setTaskList(fill);\n      }\n\n      function checkBox() {\n        if (task.done) {\n          task.done = false;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        } else {\n          task.done = true;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        }\n      }\n\n      function updateTask() {\n        if (task.update) {\n          task.update = false;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        } else {\n          task.name = updatateText.current.value;\n          task.update = true;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n        }\n      }\n\n      function TaskListRender() {\n        if (task.update) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tasklist\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"checkbox\",\n              type: \"checkbox\",\n              checked: task.done,\n              onChange: checkBox\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"tasktext\",\n              children: task.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"editbutton\",\n              onClick: updateTask,\n              children: \"\\u270F\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"deletebutton\",\n              onClick: delTask,\n              children: \"\\u274C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, task.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"tasklist\",\n              onSubmit: updateTask,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: task.name,\n                defaultValue: task.name,\n                className: \"taskedit\",\n                ref: updatateText,\n                maxLength: 50,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"editbutton\",\n                type: \"submit\",\n                children: \"\\u270F\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"deletebutton\",\n                onClick: delTask,\n                children: \"\\u274C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(TaskListRender, {}, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 16\n      }, this);\n    }, \"njp1wCuoM+Fh3c83y6IBozioUyM=\")), \"njp1wCuoM+Fh3c83y6IBozioUyM=\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ListTask, \"j/ujDg/5ylaTMnz8Nh90i9Uo7yg=\", false, function () {\n  return [useTaskList];\n});\n\n_c = ListTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/tasklist2/src/components/ListTask/ListTask.js"],"names":["useTaskList","useRef","useMemo","useCallback","useState","liststyle","ListTask","getTaskList","setTaskList","updatateText","getUpdate","setUpdate","map","task","updateValue","update","delTask","id","fill","filter","checkBox","done","boxUpdate","updateTask","name","current","value","TaskListRender"],"mappings":"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","sourcesContent":["import { useTaskList } from \"../AppContext/AppProvider\"\r\nimport { useRef, useMemo, useCallback, useState } from \"react\"\r\nimport liststyle from \"./liststyle.css\"\r\n\r\nexport const ListTask = () => {\r\n  const { getTaskList, setTaskList } = useTaskList()\r\n  const updatateText = useRef(\"a\")\r\n  const [getUpdate, setUpdate] = useState(true)\r\n\r\n  return (\r\n    <div>\r\n      {getTaskList.map((task) => {\r\n\r\n        const updateValue = useMemo(() => {\r\n            task.update = false\r\n        }, [])\r\n\r\n        function delTask() {\r\n          var id = task.id\r\n          const fill = getTaskList.filter((task) => {\r\n            return task.id !== id\r\n          })\r\n          setTaskList(fill)\r\n        }\r\n\r\n        function checkBox() {\r\n          if (task.done) {\r\n            task.done = false\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList\r\n            })\r\n            setTaskList(boxUpdate)\r\n          } else {\r\n            task.done = true\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList\r\n            })\r\n            setTaskList(boxUpdate)\r\n          }\r\n        }\r\n\r\n        function updateTask() {\r\n          if (task.update) {\r\n            task.update = false\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList\r\n            })\r\n            setTaskList(boxUpdate)\r\n          } else {\r\n            task.name = updatateText.current.value\r\n            task.update = true\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList\r\n            })\r\n            setTaskList(boxUpdate)\r\n          }\r\n        }\r\n\r\n        function TaskListRender() {\r\n          if (task.update) {\r\n            return (\r\n              <div className=\"tasklist\" key={task.id}>\r\n                <input\r\n                  className=\"checkbox\"\r\n                  type=\"checkbox\"\r\n                  checked={task.done}\r\n                  onChange={checkBox}\r\n                ></input>\r\n                <label className=\"tasktext\">{task.name}</label>\r\n                <button className=\"editbutton\" onClick={updateTask}>\r\n                  ✏️\r\n                </button>\r\n                <button className=\"deletebutton\" onClick={delTask}>\r\n                  ❌\r\n                </button>\r\n              </div>\r\n            )\r\n          } else {\r\n            return (\r\n              <div key={task.id}>\r\n                <form className=\"tasklist\" onSubmit={updateTask}>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder={task.name}\r\n                    defaultValue={task.name}\r\n                    className=\"taskedit\"\r\n                    ref={updatateText}\r\n                    maxLength={50}\r\n                    required\r\n                  />\r\n                  <button className=\"editbutton\" type=\"submit\">\r\n                    ✏️\r\n                  </button>\r\n                  <button className=\"deletebutton\" onClick={delTask}>\r\n                    ❌\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            )\r\n          }\r\n        }\r\n        return <TaskListRender key={task.id} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}