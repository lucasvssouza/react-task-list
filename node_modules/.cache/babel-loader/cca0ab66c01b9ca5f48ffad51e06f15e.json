{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\AddTask\\\\AddTask.js\",\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useText, useTaskList } from '../AppContext/AppProvider';\nimport { Overlay, Tooltip, Alert } from 'react-bootstrap';\nimport addstyle from './addstyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AddTask = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    getText,\n    setText\n  } = useText();\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList(); /// Função de envio de formulario\n\n  function Example() {\n    _s();\n\n    const [show, setShow] = useState(false);\n    const target = useRef(null);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Overlay, {\n        target: target.current,\n        show: show,\n        placement: \"left\",\n        children: props => /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: \"overlay-example\",\n          ...props,\n          children: /*#__PURE__*/_jsxDEV(Alert.Heading, {\n            children: \"Erro ao atualizar a tarefa!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n  _s(Example, \"yDjrBmTqsCuzqqYe0FCtEA+YC6w=\");\n\n  const createTask = e => {\n    e.preventDefault();\n    var checkText = getText.toString().indexOf(\" \");\n\n    if (checkText !== 0) {\n      /// Criar objeto \"tarefa\"\n      let newtask = {\n        id: new Date().getTime().toString(),\n        name: getText,\n        done: false\n      }; /// Salvar objeto \"tarefa\" no array\n\n      setTaskList([...getTaskList, newtask]);\n      setText('');\n    } else {\n      setText('');\n    }\n  }; /// Salvar no localstorage \n\n\n  useEffect(() => {\n    localStorage.setItem('task', JSON.stringify(getTaskList));\n  }, [getTaskList]);\n  return (\n    /*#__PURE__*/\n    /// Inicio do formulario   \n    _jsxDEV(\"div\", {\n      autoComplete: \"off\",\n      onSubmit: createTask,\n      className: \"addtask\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Adicionar Tarefa\",\n        required: true,\n        onChange: e => setText(e.target.value),\n        value: getText,\n        ref: target,\n        className: \"addtext\",\n        maxLength: 50\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"addbutton\",\n        onClick: () => setShow(true),\n        children: \"\\u2795\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) /// Fim do formulario\n\n  );\n};\n\n_s2(AddTask, \"LlzWSE/lDc2IxiABz0qdiAqKgeU=\", false, function () {\n  return [useText, useTaskList];\n});\n\n_c = AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/AddTask/AddTask.js"],"names":["useEffect","useState","useRef","useText","useTaskList","Overlay","Tooltip","Alert","addstyle","AddTask","getText","setText","getTaskList","setTaskList","Example","show","setShow","target","current","props","createTask","e","preventDefault","checkText","toString","indexOf","newtask","id","Date","getTime","name","done","localStorage","setItem","JSON","stringify","value"],"mappings":"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","sourcesContent":["import { useEffect,useState, useRef }  from 'react'\r\nimport { useText, useTaskList } from '../AppContext/AppProvider'\r\nimport { Overlay, Tooltip, Alert } from 'react-bootstrap'\r\nimport addstyle from './addstyle.css'\r\n\r\nexport const AddTask = () =>{\r\n    const { getText, setText} = useText()\r\n    const { getTaskList, setTaskList } = useTaskList()\r\n\r\n    /// Função de envio de formulario\r\n\r\n\r\n    function Example() {\r\n        const [show, setShow] = useState(false);\r\n        const target = useRef(null);\r\n      \r\n        return (\r\n          <>\r\n            \r\n            <Overlay target={target.current} show={show} placement=\"left\">\r\n              {(props) => (\r\n                <Tooltip id=\"overlay-example\" {...props}>\r\n                  <Alert.Heading>Erro ao atualizar a tarefa!</Alert.Heading>\r\n                </Tooltip>\r\n                \r\n              )}\r\n            </Overlay>\r\n          </>\r\n        );\r\n      }\r\n\r\n\r\n    const createTask = (e) =>{\r\n        e.preventDefault()\r\n\r\n        var checkText = getText.toString().indexOf(\" \")\r\n        if(checkText !== 0){\r\n        /// Criar objeto \"tarefa\"\r\n        let newtask = {\r\n            id: new Date().getTime().toString(),\r\n            name: getText,\r\n            done: false\r\n        }\r\n        /// Salvar objeto \"tarefa\" no array\r\n        setTaskList([...getTaskList, newtask])\r\n        setText('')\r\n        } else{\r\n            setText('')\r\n        }\r\n    }\r\n\r\n\r\n    /// Salvar no localstorage \r\n    useEffect(()=>{\r\n        localStorage.setItem('task', JSON.stringify(getTaskList))\r\n    },[getTaskList])\r\n\r\n    return(\r\n        /// Inicio do formulario   \r\n        <div autoComplete=\"off\" onSubmit={createTask} className=\"addtask\">\r\n                    <input type='text' placeholder=\"Adicionar Tarefa\" required onChange={(e) => setText(e.target.value)} value={getText} ref={target} className='addtext' maxLength={50} />\r\n                <button type=\"button\" className='addbutton' onClick={() => setShow(true)}>\r\n                ➕\r\n                </button>\r\n                <Example></Example>\r\n            \r\n        </div>  \r\n\r\n\r\n        /// Fim do formulario\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}