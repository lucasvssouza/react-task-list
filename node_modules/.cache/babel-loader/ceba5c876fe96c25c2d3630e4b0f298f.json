{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\ListTask\\\\ListTask.js\",\n    _s2 = $RefreshSig$();\n\nimport { useTaskList } from \"../AppContext/AppProvider\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { useState, useRef } from \"react\";\nimport liststyle from \"./liststyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListTask = () => {\n  _s2();\n\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [getTaskList.map(task => {\n      var _s = $RefreshSig$();\n\n      function delTask() {\n        /// Filtra a tarefa de acordo com a ID\n        var id = task.id;\n        const fill = getTaskList.filter(task => {\n          return task.id !== id;\n        }); /// Filtra a tarefa de acordo com a ID\n\n        setTaskList(fill); /// Exibe alerta de sucesso\n\n        toast.success(\"Tarefa '\" + task.name + \"' foi excluida com sucesso!\", {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          theme: \"colored\",\n          progress: undefined\n        }); /// Exibe alerta de sucesso\n      }\n\n      function checkBox() {\n        if (task.done) {\n          task.done = false;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n          console.log(\"O status da tarefa foi atulizado para 'Em andamento'\");\n        } else {\n          task.done = true;\n          const boxUpdate = getTaskList.filter(() => {\n            return getTaskList;\n          });\n          setTaskList(boxUpdate);\n          console.log(\"O status da tarefa foi atulizado para 'Completo'\");\n        }\n      }\n\n      function UpdateTask() {\n        _s();\n\n        const [showModal, setShowModal] = useState(false);\n\n        const handleClose = () => setShowModal(false);\n\n        const handleShow = () => setShowModal(true);\n\n        const updateText = useRef();\n\n        function checkUpdate(e) {\n          e.preventDefault();\n          var edittext = updateText.current.value;\n\n          while (edittext.charAt(0) === \" \") {\n            edittext = edittext.substring(1);\n            console.log(edittext);\n          }\n\n          var checkText = edittext.toString().indexOf(\" \");\n\n          if (checkText !== 0 && edittext !== \"\" && edittext !== null) {\n            task.name = edittext;\n            const boxUpdate = getTaskList.filter(() => {\n              return getTaskList;\n            });\n            setTaskList(boxUpdate);\n            setShowModal(false); /// Exibe alerta de sucesso\n\n            toast.success(\"Tarefa atualizada com sucesso!\", {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              theme: \"colored\",\n              progress: undefined\n            }); /// Exibe alerta de sucesso\n            /// Limpa o input\n\n            updateText.current.value = \"\"; /// Limpa o input\n          } else {\n            /// Exibe alerta de erro\n            toast.error(\"Não é possivel criar uma tarefa vazia!\", {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              theme: \"colored\",\n              progress: undefined\n            }); /// Exibe alerta de erro\n            /// Limpa o input\n\n            updateText.current.value = \"\"; /// Limpa o input\n          }\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"editbutton\",\n            onClick: handleShow,\n            children: \"\\u270F\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: handleClose,\n            contentClassName: true,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"editH1\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Editar Tarefa\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n              style: {\n                \"margin-top\": \"-10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: checkUpdate,\n              className: \"inputDiv\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: task.name,\n                ref: updateText,\n                className: \"editInput\",\n                maxLength: 45\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"buttonsDiv\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                className: \"editButtons\",\n                onClick: handleClose,\n                children: \"Fechar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                className: \"editButtons\",\n                onClick: checkUpdate,\n                children: \"Salvar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this);\n      }\n\n      _s(UpdateTask, \"ibfIV96zRNuzppMO9Vxu7sazHXU=\");\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasklist\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"checkbox\",\n          type: \"checkbox\",\n          checked: task.done,\n          onChange: checkBox\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"tasktext\",\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(UpdateTask, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deletebutton\",\n          onClick: delTask,\n          children: \"\\u274C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ListTask, \"sZF4+r8rE0bIOr2av7Pj6v5leOI=\", false, function () {\n  return [useTaskList];\n});\n\n_c = ListTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/ListTask/ListTask.js"],"names":["useTaskList","Modal","Button","ToastContainer","toast","useState","useRef","liststyle","ListTask","getTaskList","setTaskList","map","task","delTask","id","fill","filter","success","name","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","progress","undefined","checkBox","done","boxUpdate","console","log","UpdateTask","showModal","setShowModal","handleClose","handleShow","updateText","checkUpdate","e","preventDefault","edittext","current","value","charAt","substring","checkText","toString","indexOf","error"],"mappings":"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","sourcesContent":["import { useTaskList } from \"../AppContext/AppProvider\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useState, useRef } from \"react\";\r\nimport liststyle from \"./liststyle.css\";\r\n\r\nexport const ListTask = () => {\r\n  const { getTaskList, setTaskList } = useTaskList();\r\n\r\n  return (\r\n    <div>\r\n      {getTaskList.map((task) => {\r\n        function delTask() {\r\n          /// Filtra a tarefa de acordo com a ID\r\n          var id = task.id;\r\n          const fill = getTaskList.filter((task) => {\r\n            return task.id !== id;\r\n          });\r\n          /// Filtra a tarefa de acordo com a ID\r\n          setTaskList(fill);\r\n/// Exibe alerta de sucesso\r\n          toast.success(\"Tarefa '\"+ task.name +\"' foi excluida com sucesso!\", {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            theme: \"colored\",\r\n            progress: undefined,\r\n          });\r\n          /// Exibe alerta de sucesso\r\n        }\r\n\r\n        function checkBox() {\r\n          if (task.done) {\r\n            task.done = false;\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList;\r\n            });\r\n            setTaskList(boxUpdate);\r\n            console.log(\"O status da tarefa foi atulizado para 'Em andamento'\");\r\n          } else {\r\n            task.done = true;\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList;\r\n            });\r\n            setTaskList(boxUpdate);\r\n            console.log(\"O status da tarefa foi atulizado para 'Completo'\");\r\n          }\r\n        }\r\n\r\n        function UpdateTask() {\r\n          const [showModal, setShowModal] = useState(false);\r\n          const handleClose = () => setShowModal(false);\r\n          const handleShow = () => setShowModal(true);\r\n          const updateText = useRef();\r\n\r\n          function checkUpdate(e) {\r\n            e.preventDefault();\r\n\r\n            var edittext = updateText.current.value;\r\n            while (edittext.charAt(0) === \" \") {\r\n              edittext = edittext.substring(1);\r\n              console.log(edittext);\r\n            }\r\n\r\n            var checkText = edittext.toString().indexOf(\" \");\r\n\r\n            if (checkText !== 0 && edittext !== \"\" && edittext !== null) {\r\n              task.name = edittext;\r\n              const boxUpdate = getTaskList.filter(() => {\r\n                return getTaskList;\r\n              });\r\n              setTaskList(boxUpdate);\r\n              setShowModal(false);\r\n              /// Exibe alerta de sucesso\r\n              toast.success(\"Tarefa atualizada com sucesso!\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n              });\r\n              /// Exibe alerta de sucesso\r\n                    /// Limpa o input\r\n                    updateText.current.value = \"\";\r\n                    /// Limpa o input\r\n            } else {\r\n              /// Exibe alerta de erro\r\n              toast.error(\"Não é possivel criar uma tarefa vazia!\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n              });\r\n              /// Exibe alerta de erro\r\n                    /// Limpa o input\r\n              updateText.current.value = \"\";\r\n                    /// Limpa o input\r\n            }\r\n          }\r\n\r\n          return (\r\n            <div>\r\n              <button className=\"editbutton\" onClick={handleShow}>\r\n                ✏️\r\n              </button>\r\n\r\n              <Modal show={showModal} onHide={handleClose} contentClassName>\r\n                <div className=\"editH1\">\r\n                  <h1>Editar Tarefa</h1>\r\n                </div>\r\n\r\n                <hr style={{ \"margin-top\": \"-10px\" }}></hr>\r\n                <form onSubmit={checkUpdate} className=\"inputDiv\">\r\n                  <input\r\n                    placeholder={task.name}\r\n                    ref={updateText}\r\n                    className=\"editInput\"\r\n                    maxLength={45}\r\n                  ></input>\r\n                </form>\r\n                <hr></hr>\r\n\r\n                <div className=\"buttonsDiv\">\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"editButtons\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Fechar\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    className=\"editButtons\"\r\n                    onClick={checkUpdate}\r\n                  >\r\n                    Salvar\r\n                  </Button>\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          );\r\n        }\r\n        return (\r\n          <div className=\"tasklist\" key={task.id}>\r\n            <input\r\n              className=\"checkbox\"\r\n              type=\"checkbox\"\r\n              checked={task.done}\r\n              onChange={checkBox}\r\n            ></input>\r\n            <label className=\"tasktext\">{task.name}</label>\r\n            <UpdateTask></UpdateTask>\r\n            <button className=\"deletebutton\" onClick={delTask}>\r\n              ❌\r\n            </button>\r\n          </div>\r\n        );\r\n      })}\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}