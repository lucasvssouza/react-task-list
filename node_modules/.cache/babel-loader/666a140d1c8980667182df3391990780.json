{"ast":null,"code":"import _slicedToArray from\"N:/Lucas/GitHub/publico/react-task-list/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useTaskList}from\"../AppContext/AppProvider\";import{Modal,Button}from\"react-bootstrap\";import\"bootstrap/dist/css/bootstrap.min.css\";import{toast}from\"react-toastify\";import\"react-toastify/dist/ReactToastify.css\";import{useState,useRef}from\"react\";import liststyle from\"./liststyle.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var ListTask=function ListTask(){var _useTaskList=useTaskList(),getTaskList=_useTaskList.getTaskList,setTaskList=_useTaskList.setTaskList;/// Mapeia e renderiza a Lista de Tarefas\nreturn/*#__PURE__*/_jsx(\"div\",{children:getTaskList.map(function(task){/// Exclui a tarefa\nfunction DelTask(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),modalDel=_useState2[0],setModalDel=_useState2[1];var closeModalDel=function closeModalDel(){return setModalDel(false);};var openModalDel=function openModalDel(){return setModalDel(true);};function checkDel(){/// Filtra as tarefas que não possuem a ID de pesquisa\nvar id=task.id;var fill=getTaskList.filter(function(task){return task.id!==id;});setTaskList(fill);/// Filtra as tarefas que não possuem a ID de pesquisa\n/// Exibe alerta de sucesso\ntoast.success(\"Tarefa '\"+task.name+\"' foi excluida com sucesso!\",{position:\"top-right\",autoClose:5000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,theme:\"colored\",progress:undefined});openModalDel(false);}/// Exibe alerta de sucesso\nreturn/*#__PURE__*/ (/// Exibe o Modal de excluir tarefa\n_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"deletebutton\",onClick:openModalDel,children:\"\\u274C\"}),/*#__PURE__*/_jsxs(Modal,{show:modalDel,onHide:closeModalDel,contentClassName:true,children:[/*#__PURE__*/_jsx(\"div\",{className:\"modalH2\",children:/*#__PURE__*/_jsx(\"h2\",{children:\"Excluir Tarefa\"})}),/*#__PURE__*/_jsx(\"hr\",{style:{marginTop:\"-10px\"}}),/*#__PURE__*/_jsx(\"div\",{className:\"midDiv\",children:/*#__PURE__*/_jsxs(\"label\",{style:{paddingLeft:\"10px\"},children:[\"Deseja mesmo excluir a tarafa: '\",task.name,\"' ?\"]})}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"buttonsDiv\",children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",className:\"modalButtons\",onClick:closeModalDel,children:\"Cancelar\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",className:\"modalButtons\",onClick:checkDel,children:\"Excluir\"})]})]})]})/// Exibe o Modal de excluir tarefa\n);}/// Exclui a tarefa\n/// Atualiza o \"status\" da tarefa\nfunction checkBox(){/// Define o \"status\" da tarefa para incompleto (false)\nif(task.done){task.done=false;var boxUpdate=getTaskList.filter(function(){return getTaskList;});setTaskList(boxUpdate);}/// Define o \"status\" da tarefa para incompleto (false)\n/// Define o \"status\" da tarefa para completo (true)\nelse{task.done=true;var _boxUpdate=getTaskList.filter(function(){return getTaskList;});setTaskList(_boxUpdate);}/// Define o \"status\" da tarefa para completo (true)\n}/// Atualiza o \"status\" da tarefa\n/// Atualiza o \"nome\" da tarefa\nfunction UpdateTask(){var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),modalEdit=_useState4[0],setmodalEdit=_useState4[1];var closeModalEdit=function closeModalEdit(){return setmodalEdit(false);};var openModalEdit=function openModalEdit(){return setmodalEdit(true);};var updateText=useRef();function checkUpdate(e){e.preventDefault();/// Remove os \"espaço\" iniciais do input\nvar edittext=updateText.current.value;while(edittext.charAt(0)===\" \"){edittext=edittext.substring(1);console.log(edittext);}/// Remove os \"espaço\" iniciais do input\nvar checkText=edittext.toString().indexOf(\" \");if(checkText!==0&&edittext!==\"\"&&edittext!==null){task.name=edittext;/// Atualiza o \"nome\" da tarefa e a atualiza o array\nvar boxUpdate=getTaskList.filter(function(){return getTaskList;});/// Atualiza o \"nome\" da tarefa e a atualiza o array\n/// Salva o novo \"nome da tarefa\"\nsetTaskList(boxUpdate);/// Salva o novo \"nome da tarefa\"\nopenModalEdit(false);/// Exibe alerta de sucesso\ntoast.success(\"Tarefa atualizada com sucesso!\",{position:\"top-right\",autoClose:5000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,theme:\"colored\",progress:undefined});/// Exibe alerta de sucesso\n/// Limpa o input\nupdateText.current.value=\"\";/// Limpa o input\n}else{/// Exibe alerta de erro\ntoast.error(\"Não é possivel criar uma tarefa vazia!\",{position:\"top-right\",autoClose:5000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,theme:\"colored\",progress:undefined});/// Exibe alerta de erro\n/// Limpa o input\nupdateText.current.value=\"\";/// Limpa o input\n}}/// Exibe o Modal de atualizar tarefa\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"editbutton\",onClick:openModalEdit,children:\"\\u270F\\uFE0F\"}),/*#__PURE__*/_jsxs(Modal,{show:modalEdit,onHide:closeModalEdit,contentClassName:true,children:[/*#__PURE__*/_jsx(\"div\",{className:\"modalH2\",children:/*#__PURE__*/_jsx(\"h2\",{children:\"Editar Tarefa\"})}),/*#__PURE__*/_jsx(\"hr\",{style:{marginTop:\"-10px\"}}),/*#__PURE__*/_jsx(\"form\",{onSubmit:checkUpdate,className:\"midDiv\",children:/*#__PURE__*/_jsx(\"input\",{placeholder:task.name,ref:updateText,className:\"editInput\",maxLength:45})}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"buttonsDiv\",children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",className:\"modalButtons\",onClick:closeModalEdit,children:\"Cancelar\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",className:\"modalButtons\",onClick:checkUpdate,children:\"Salvar\"})]})]})]});/// Exibe o Modal de atualizar tarefa\n}/// Atualiza o \"nome\" da tarefa\n/// Exibe a Lista de Tarefas\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"tasklist\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"checkbox\",type:\"checkbox\",checked:task.done,onChange:checkBox}),/*#__PURE__*/_jsx(\"label\",{className:\"tasktext\",children:task.name}),/*#__PURE__*/_jsx(UpdateTask,{}),/*#__PURE__*/_jsx(DelTask,{})]},task.id);/// Exibe a Lista de Tarefas\n})});/// Mapeia e renderiza a Lista de Tarefas\n};","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/react-task-list/src/components/ListTask/ListTask.js"],"names":["useTaskList","Modal","Button","toast","useState","useRef","liststyle","ListTask","getTaskList","setTaskList","map","task","DelTask","modalDel","setModalDel","closeModalDel","openModalDel","checkDel","id","fill","filter","success","name","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","progress","undefined","marginTop","paddingLeft","checkBox","done","boxUpdate","UpdateTask","modalEdit","setmodalEdit","closeModalEdit","openModalEdit","updateText","checkUpdate","e","preventDefault","edittext","current","value","charAt","substring","console","log","checkText","toString","indexOf","error"],"mappings":"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","sourcesContent":["import { useTaskList } from \"../AppContext/AppProvider\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useState, useRef } from \"react\";\r\nimport liststyle from \"./liststyle.css\";\r\n\r\nexport const ListTask = () => {\r\n  const { getTaskList, setTaskList } = useTaskList();\r\n\r\n  /// Mapeia e renderiza a Lista de Tarefas\r\n  return (\r\n    <div>\r\n      {getTaskList.map((task) => {\r\n        /// Exclui a tarefa\r\n        function DelTask() {\r\n          const [modalDel, setModalDel] = useState(false);\r\n          const closeModalDel = () => setModalDel(false);\r\n          const openModalDel = () => setModalDel(true);\r\n\r\n          function checkDel() {\r\n            /// Filtra as tarefas que não possuem a ID de pesquisa\r\n            var id = task.id;\r\n            const fill = getTaskList.filter((task) => {\r\n              return task.id !== id;\r\n            });\r\n            setTaskList(fill);\r\n            /// Filtra as tarefas que não possuem a ID de pesquisa\r\n            /// Exibe alerta de sucesso\r\n            toast.success(\r\n              \"Tarefa '\" + task.name + \"' foi excluida com sucesso!\",\r\n              {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n              }\r\n            );\r\n            openModalDel(false);\r\n          }\r\n          /// Exibe alerta de sucesso\r\n\r\n          return (\r\n            /// Exibe o Modal de excluir tarefa\r\n            <div>\r\n              <button className=\"deletebutton\" onClick={openModalDel}>\r\n                ❌\r\n              </button>\r\n              <Modal show={modalDel} onHide={closeModalDel} contentClassName>\r\n                <div className=\"modalH2\">\r\n                  <h2>Excluir Tarefa</h2>\r\n                </div>\r\n                <hr style={{ marginTop: \"-10px\" }}></hr>\r\n                <div className=\"midDiv\">\r\n                  <label style={{ paddingLeft: \"10px\" }}>\r\n                    Deseja mesmo excluir a tarafa: '{task.name}' ?\r\n                  </label>\r\n                </div>\r\n                <hr></hr>\r\n                <div className=\"buttonsDiv\">\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"modalButtons\"\r\n                    onClick={closeModalDel}\r\n                  >\r\n                    Cancelar\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    className=\"modalButtons\"\r\n                    onClick={checkDel}\r\n                  >\r\n                    Excluir\r\n                  </Button>\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n            /// Exibe o Modal de excluir tarefa\r\n          );\r\n        }\r\n        /// Exclui a tarefa\r\n\r\n        /// Atualiza o \"status\" da tarefa\r\n        function checkBox() {\r\n          /// Define o \"status\" da tarefa para incompleto (false)\r\n          if (task.done) {\r\n            task.done = false;\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList;\r\n            });\r\n            setTaskList(boxUpdate);\r\n          }\r\n          /// Define o \"status\" da tarefa para incompleto (false)\r\n          /// Define o \"status\" da tarefa para completo (true)\r\n          else {\r\n            task.done = true;\r\n            const boxUpdate = getTaskList.filter(() => {\r\n              return getTaskList;\r\n            });\r\n            setTaskList(boxUpdate);\r\n          }\r\n          /// Define o \"status\" da tarefa para completo (true)\r\n        }\r\n        /// Atualiza o \"status\" da tarefa\r\n\r\n        /// Atualiza o \"nome\" da tarefa\r\n        function UpdateTask() {\r\n          const [modalEdit, setmodalEdit] = useState(false);\r\n          const closeModalEdit = () => setmodalEdit(false);\r\n          const openModalEdit = () => setmodalEdit(true);\r\n          const updateText = useRef();\r\n\r\n          function checkUpdate(e) {\r\n            e.preventDefault();\r\n            /// Remove os \"espaço\" iniciais do input\r\n            var edittext = updateText.current.value;\r\n            while (edittext.charAt(0) === \" \") {\r\n              edittext = edittext.substring(1);\r\n              console.log(edittext);\r\n            }\r\n            /// Remove os \"espaço\" iniciais do input\r\n            var checkText = edittext.toString().indexOf(\" \");\r\n\r\n            if (checkText !== 0 && edittext !== \"\" && edittext !== null) {\r\n              task.name = edittext;\r\n              /// Atualiza o \"nome\" da tarefa e a atualiza o array\r\n              const boxUpdate = getTaskList.filter(() => {\r\n                return getTaskList;\r\n              });\r\n              /// Atualiza o \"nome\" da tarefa e a atualiza o array\r\n              /// Salva o novo \"nome da tarefa\"\r\n              setTaskList(boxUpdate);\r\n              /// Salva o novo \"nome da tarefa\"\r\n              openModalEdit(false);\r\n              /// Exibe alerta de sucesso\r\n              toast.success(\"Tarefa atualizada com sucesso!\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n              });\r\n              /// Exibe alerta de sucesso\r\n              /// Limpa o input\r\n              updateText.current.value = \"\";\r\n              /// Limpa o input\r\n            } else {\r\n              /// Exibe alerta de erro\r\n              toast.error(\"Não é possivel criar uma tarefa vazia!\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n              });\r\n              /// Exibe alerta de erro\r\n              /// Limpa o input\r\n              updateText.current.value = \"\";\r\n              /// Limpa o input\r\n            }\r\n          }\r\n          /// Exibe o Modal de atualizar tarefa\r\n          return (\r\n            <div>\r\n              <button className=\"editbutton\" onClick={openModalEdit}>\r\n                ✏️\r\n              </button>\r\n              <Modal show={modalEdit} onHide={closeModalEdit} contentClassName>\r\n                <div className=\"modalH2\">\r\n                  <h2>Editar Tarefa</h2>\r\n                </div>\r\n                <hr style={{ marginTop: \"-10px\" }}></hr>\r\n                <form onSubmit={checkUpdate} className=\"midDiv\">\r\n                  <input\r\n                    placeholder={task.name}\r\n                    ref={updateText}\r\n                    className=\"editInput\"\r\n                    maxLength={45}\r\n                  ></input>\r\n                </form>\r\n                <hr></hr>\r\n                <div className=\"buttonsDiv\">\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"modalButtons\"\r\n                    onClick={closeModalEdit}\r\n                  >\r\n                    Cancelar\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    className=\"modalButtons\"\r\n                    onClick={checkUpdate}\r\n                  >\r\n                    Salvar\r\n                  </Button>\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          );\r\n          /// Exibe o Modal de atualizar tarefa\r\n        }\r\n        /// Atualiza o \"nome\" da tarefa\r\n\r\n        /// Exibe a Lista de Tarefas\r\n        return (\r\n          <div className=\"tasklist\" key={task.id}>\r\n            <input\r\n              className=\"checkbox\"\r\n              type=\"checkbox\"\r\n              checked={task.done}\r\n              onChange={checkBox}\r\n            ></input>\r\n            <label className=\"tasktext\">{task.name}</label>\r\n            <UpdateTask></UpdateTask>\r\n            <DelTask></DelTask>\r\n          </div>\r\n        );\r\n        /// Exibe a Lista de Tarefas\r\n      })}\r\n    </div>\r\n  );\r\n  /// Mapeia e renderiza a Lista de Tarefas\r\n};\r\n"]},"metadata":{},"sourceType":"module"}