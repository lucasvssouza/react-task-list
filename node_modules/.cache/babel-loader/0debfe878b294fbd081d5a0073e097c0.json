{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\AddTask\\\\AddTask.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport { useText, useTaskList } from \"../AppContext/AppProvider\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/react-toastify.cjs.development';\nimport 'react-toastify/dist/react-toastiy';\nimport addstyle from \"./addstyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddTask = () => {\n  _s();\n\n  const {\n    getText,\n    setText\n  } = useText();\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  const target = useRef(\"\"); /// FunÃ§Ã£o de envio de formulario\n\n  const createTask = e => {\n    e.preventDefault();\n    var checkText = target.current.value.toString().indexOf(\" \");\n\n    if (checkText !== 0 && target.current.value !== \"\" && target.current.value !== null) {\n      /// Criar objeto \"tarefa\"\n      let newtask = {\n        id: new Date().getTime().toString(),\n        name: target.current.value,\n        done: false\n      }; /// Salvar objeto \"tarefa\" no array\n\n      setTaskList([...getTaskList, newtask]);\n      setText(\"\");\n      target.current.value = \"\";\n    } else {\n      toast(\"Wow so easy !\");\n      setText(\"\");\n      target.current.value = \"\";\n      toast.error('ðŸ¦„ Wow so easy!', {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n  }; /// Salvar no localstorage\n\n\n  useEffect(() => {\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\n  }, [getTaskList]);\n  return (\n    /*#__PURE__*/\n    /// Inicio do formulario\n    _jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      onSubmit: createTask,\n      className: \"addtask\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Adicionar Tarefa\",\n        required: true,\n        ref: target,\n        className: \"addtext\",\n        maxLength: 45\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"addbutton\",\n        onClick: createTask,\n        children: \"\\u2795\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this) /// Fim do formulario\n\n  );\n};\n\n_s(AddTask, \"nm1lRuf99ahz5aZgP3zi2UrzhL0=\", false, function () {\n  return [useText, useTaskList];\n});\n\n_c = AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/AddTask/AddTask.js"],"names":["useEffect","useRef","useText","useTaskList","ToastContainer","toast","addstyle","AddTask","getText","setText","getTaskList","setTaskList","target","createTask","e","preventDefault","checkText","current","value","toString","indexOf","newtask","id","Date","getTime","name","done","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport { useText, useTaskList } from \"../AppContext/AppProvider\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/react-toastify.cjs.development';\r\nimport 'react-toastify/dist/react-toastiy';\r\nimport addstyle from \"./addstyle.css\";\r\n\r\nexport const AddTask = () => {\r\n  const { getText, setText } = useText();\r\n  const { getTaskList, setTaskList } = useTaskList();\r\n  const target = useRef(\"\");\r\n\r\n    /// FunÃ§Ã£o de envio de formulario\r\n  const createTask = (e) => {\r\n    e.preventDefault();\r\n\r\n    var checkText = target.current.value.toString().indexOf(\" \");\r\n\r\n    if (\r\n      checkText !== 0 &&\r\n      target.current.value !== \"\" &&\r\n      target.current.value !== null\r\n    ) {\r\n      /// Criar objeto \"tarefa\"\r\n      let newtask = {\r\n        id: new Date().getTime().toString(),\r\n        name: target.current.value,\r\n        done: false,\r\n      };\r\n      /// Salvar objeto \"tarefa\" no array\r\n      setTaskList([...getTaskList, newtask]);\r\n      setText(\"\");\r\n      target.current.value = \"\";\r\n    } else {\r\n      toast(\"Wow so easy !\");\r\n      setText(\"\");\r\n      target.current.value = \"\";\r\n      toast.error('ðŸ¦„ Wow so easy!', {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        });\r\n    }\r\n  };\r\n\r\n  /// Salvar no localstorage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\r\n  }, [getTaskList]);\r\n\r\n  return (\r\n    /// Inicio do formulario\r\n    <form autoComplete=\"off\" onSubmit={createTask} className=\"addtask\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Adicionar Tarefa\"\r\n        required\r\n        ref={target}\r\n        className=\"addtext\"\r\n        maxLength={45}\r\n      />\r\n      <button type=\"submit\" className=\"addbutton\" onClick={createTask}>\r\n        âž•\r\n      </button>\r\n    </form>\r\n    \r\n    /// Fim do formulario\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}