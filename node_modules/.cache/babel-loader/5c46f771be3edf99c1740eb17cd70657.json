{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\AddTask\\\\AddTask.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport { useTaskList } from \"../AppContext/AppProvider\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport addstyle from \"./addstyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddTask = () => {\n  _s();\n\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList();\n  const target = useRef(\"\"); /// Função de envio de formulario\n\n  const createTask = e => {\n    e.preventDefault(); /// Remove os \"espaço\" iniciais do input\n\n    var name = target.current.value;\n\n    while (name.charAt(0) === \" \") {\n      name = name.substring(1);\n      console.log(name);\n    } /// Remove os \"espaço\" iniciais do input\n\n\n    var checkText = name.toString().indexOf(\" \");\n\n    if (checkText !== 0 && name !== null && name !== \"\") {\n      /// Salva a nova tarefa em um array\n      let newtask = {\n        id: new Date().getTime().toString(),\n        name: name,\n        done: false\n      }; /// Salva a nova tarefa em um array\n      /// Salva o objeto \"tarefa\" no array\n\n      setTaskList([...getTaskList, newtask]); /// Salva  o objeto \"tarefa\" no array\n      /// Limpa o input\n\n      target.current.value = \"\"; /// Limpa o input\n      /// Exibe alerta de sucesso\n\n      toast.success(\"Tarefa criada com sucesso!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        theme: \"colored\",\n        progress: undefined\n      }); /// Exibe alerta de sucesso\n    } else {\n      /// Exibe alerta de erro\n      toast.error(\"Não é possivel criar uma tarefa vazia!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        theme: \"colored\",\n        progress: undefined\n      }); /// Exibe alerta de erro\n      /// Limpa o input\n\n      target.current.value = \"\"; /// Limpa o input\n    }\n  }; /// Função de envio de formulario\n  /// Salva a tarefa no localstorage\n\n\n  useEffect(() => {\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\n  }, [getTaskList]); /// Salva a tarefa no localstorage\n\n  return (\n    /*#__PURE__*/\n    /// Inicio do formulario\n    _jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      onSubmit: createTask,\n      className: \"addtask\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Adicionar Tarefa\",\n        required: true,\n        ref: target,\n        className: \"addtext\",\n        maxLength: 45\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"addbutton\",\n        onClick: createTask,\n        children: \"\\u2795\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this) /// Fim do formulario\n\n  );\n};\n\n_s(AddTask, \"BWN4yIOu8gVaun2R3S9r9dSRX3w=\", false, function () {\n  return [useTaskList];\n});\n\n_c = AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/AddTask/AddTask.js"],"names":["useEffect","useRef","useTaskList","ToastContainer","toast","addstyle","AddTask","getTaskList","setTaskList","target","createTask","e","preventDefault","name","current","value","charAt","substring","console","log","checkText","toString","indexOf","newtask","id","Date","getTime","done","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","progress","undefined","error","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport {  useTaskList } from \"../AppContext/AppProvider\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport addstyle from \"./addstyle.css\";\r\n\r\nexport const AddTask = () => {\r\n  const { getTaskList, setTaskList } = useTaskList();\r\n  const target = useRef(\"\");\r\n\r\n  /// Função de envio de formulario\r\n  const createTask = (e) => {\r\n    e.preventDefault();\r\n\r\n    /// Remove os \"espaço\" iniciais do input\r\n    var name = target.current.value;\r\n    while (name.charAt(0) === \" \") {\r\n      name = name.substring(1);\r\n      console.log(name);\r\n    }\r\n    /// Remove os \"espaço\" iniciais do input\r\n\r\n    var checkText = name.toString().indexOf(\" \");\r\n    if (checkText !== 0 && name !== null && name !== \"\") {\r\n      /// Salva a nova tarefa em um array\r\n      let newtask = {\r\n        id: new Date().getTime().toString(),\r\n        name: name,\r\n        done: false,\r\n      };\r\n      /// Salva a nova tarefa em um array\r\n\r\n      /// Salva o objeto \"tarefa\" no array\r\n      setTaskList([...getTaskList, newtask]);\r\n      /// Salva  o objeto \"tarefa\" no array\r\n\r\n      /// Limpa o input\r\n      target.current.value = \"\";\r\n      /// Limpa o input\r\n\r\n      /// Exibe alerta de sucesso\r\n      toast.success(\"Tarefa criada com sucesso!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        theme: \"colored\",\r\n        progress: undefined,\r\n      });\r\n      /// Exibe alerta de sucesso\r\n    } else {\r\n      /// Exibe alerta de erro\r\n      toast.error(\"Não é possivel criar uma tarefa vazia!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        theme: \"colored\",\r\n        progress: undefined,\r\n      });\r\n      /// Exibe alerta de erro\r\n      /// Limpa o input\r\n      target.current.value = \"\";\r\n      /// Limpa o input\r\n    }\r\n  };\r\n  /// Função de envio de formulario\r\n\r\n  /// Salva a tarefa no localstorage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"task\", JSON.stringify(getTaskList));\r\n  }, [getTaskList]);\r\n  /// Salva a tarefa no localstorage\r\n\r\n  return (\r\n    /// Inicio do formulario\r\n    <form autoComplete=\"off\" onSubmit={createTask} className=\"addtask\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Adicionar Tarefa\"\r\n        required\r\n        ref={target}\r\n        className=\"addtext\"\r\n        maxLength={45}\r\n      />\r\n      <button type=\"submit\" className=\"addbutton\" onClick={createTask}>\r\n        ➕\r\n      </button>\r\n      <ToastContainer />\r\n    </form>\r\n\r\n    /// Fim do formulario\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}