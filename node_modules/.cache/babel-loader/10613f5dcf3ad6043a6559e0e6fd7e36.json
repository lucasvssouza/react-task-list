{"ast":null,"code":"var _jsxFileName = \"N:\\\\Lucas\\\\GitHub\\\\publico\\\\Projetos\\\\(React)Task_List\\\\src\\\\components\\\\AddTask\\\\AddTask.js\",\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useText, useTaskList } from '../AppContext/AppProvider';\nimport { Overlay, Tooltip, Alert } from 'react-bootstrap';\nimport addstyle from './addstyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AddTask = () => {\n  _s2();\n\n  const {\n    getText,\n    setText\n  } = useText();\n  const {\n    getTaskList,\n    setTaskList\n  } = useTaskList(); /// Função de envio de formulario\n\n  const createTask = e => {\n    e.preventDefault();\n    var checkText = getText.toString().indexOf(\" \");\n\n    if (checkText !== 0) {\n      /// Criar objeto \"tarefa\"\n      let newtask = {\n        id: new Date().getTime().toString(),\n        name: getText,\n        done: false\n      }; /// Salvar objeto \"tarefa\" no array\n\n      setTaskList([...getTaskList, newtask]);\n      setText('');\n    } else {\n      var _s = $RefreshSig$();\n\n      function Example() {\n        _s();\n\n        const [show, setShow] = useState(false);\n        const target = useRef(null);\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            autoComplete: \"off\",\n            onSubmit: createTask,\n            className: \"addtask\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Adicionar Tarefa\",\n              required: true,\n              onChange: e => setText(e.target.value),\n              value: getText,\n              ref: target,\n              className: \"addtext\",\n              maxLength: 50\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"addbutton\",\n              onClick: () => setShow(true),\n              children: \"\\u2795\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Overlay, {\n            target: target.current,\n            show: show,\n            placement: \"left\",\n            children: props => /*#__PURE__*/_jsxDEV(Tooltip, {\n              id: \"overlay-example\",\n              ...props,\n              children: /*#__PURE__*/_jsxDEV(Alert.Heading, {\n                children: \"Erro ao atualizar a tarefa!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true);\n      }\n\n      _s(Example, \"yDjrBmTqsCuzqqYe0FCtEA+YC6w=\");\n    }\n  }; /// Salvar no localstorage \n\n\n  useEffect(() => {\n    localStorage.setItem('task', JSON.stringify(getTaskList));\n  }, [getTaskList]);\n  return (\n    /*#__PURE__*/\n    /// Inicio do formulario     \n    _jsxDEV(Example, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this) /// Fim do formulario\n\n  );\n};\n\n_s2(AddTask, \"LlzWSE/lDc2IxiABz0qdiAqKgeU=\", false, function () {\n  return [useText, useTaskList];\n});\n\n_c = AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["N:/Lucas/GitHub/publico/Projetos/(React)Task_List/src/components/AddTask/AddTask.js"],"names":["useEffect","useState","useRef","useText","useTaskList","Overlay","Tooltip","Alert","addstyle","AddTask","getText","setText","getTaskList","setTaskList","createTask","e","preventDefault","checkText","toString","indexOf","newtask","id","Date","getTime","name","done","Example","show","setShow","target","value","current","props","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { useEffect,useState, useRef }  from 'react'\r\nimport { useText, useTaskList } from '../AppContext/AppProvider'\r\nimport { Overlay, Tooltip, Alert } from 'react-bootstrap'\r\nimport addstyle from './addstyle.css'\r\n\r\nexport const AddTask = () =>{\r\n    const { getText, setText} = useText()\r\n    const { getTaskList, setTaskList } = useTaskList()\r\n\r\n    /// Função de envio de formulario\r\n\r\n\r\n\r\n\r\n\r\n    const createTask = (e) =>{\r\n        e.preventDefault()\r\n\r\n        var checkText = getText.toString().indexOf(\" \")\r\n        if(checkText !== 0){\r\n        /// Criar objeto \"tarefa\"\r\n        let newtask = {\r\n            id: new Date().getTime().toString(),\r\n            name: getText,\r\n            done: false\r\n        }\r\n        /// Salvar objeto \"tarefa\" no array\r\n        setTaskList([...getTaskList, newtask])\r\n        setText('')\r\n        } else{\r\n            function Example() {\r\n                const [show, setShow] = useState(false);\r\n                const target = useRef(null);\r\n              \r\n                return (\r\n                  <>\r\n                    <form autoComplete=\"off\" onSubmit={createTask} className=\"addtask\">\r\n                        <input type='text' placeholder=\"Adicionar Tarefa\" required onChange={(e) => setText(e.target.value)} value={getText} ref={target} className='addtext' maxLength={50} />\r\n                    <button type=\"submit\" className='addbutton' onClick={() => setShow(true)}>\r\n                    ➕\r\n                    </button>\r\n                    </form>\r\n                    <Overlay target={target.current} show={show} placement=\"left\">\r\n                      {(props) => (\r\n                        <Tooltip id=\"overlay-example\" {...props}>\r\n                          <Alert.Heading>Erro ao atualizar a tarefa!</Alert.Heading>\r\n                        </Tooltip>\r\n                        \r\n                      )}\r\n                    </Overlay>\r\n                  </>\r\n                );\r\n              }\r\n        }\r\n    }\r\n\r\n\r\n    /// Salvar no localstorage \r\n    useEffect(()=>{\r\n        localStorage.setItem('task', JSON.stringify(getTaskList))\r\n    },[getTaskList])\r\n\r\n    return(\r\n        /// Inicio do formulario     \r\n \r\n                <Example></Example>\r\n\r\n        /// Fim do formulario\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}